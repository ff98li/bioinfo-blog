[
  {
    "path": "posts/2021-07-05-geo-datasets-experiment-selection-and-initial-processing/",
    "title": "GEO DataSets: Experiment Selection and Initial Processing",
    "description": "A walkthrough of processing bulk RNA-seq data from the GEO database purely in R.",
    "author": [
      {
        "name": "Feifei Li",
        "url": {}
      }
    ],
    "date": "2021-07-05",
    "categories": [
      "R",
      "bioconductor",
      "bioinformatics"
    ],
    "contents": "\r\n\r\nContents\r\nFinding Experiments of Interest\r\nGEO metadata repository: GEOmetadb\r\nQuerying GEO database\r\nFiltering Query Result\r\nOverview of the chosen experiment\r\nDownloading Dataset\r\n\r\nRNA-seq Counts Normalisation\r\nTMM Normalisation\r\nDistribution for read counts - Before vs. after normalisation\r\n\r\nPost-normalisation Analysis\r\nBiological coefficient of variation (BCV)\r\nMean-variance relationship\r\nSample relations\r\n\r\nTo Do\r\n\r\nThis article demonstrates a pure R workflow of finding experiments of interest, downloading datasets of experiments of interest from the Gene Expression Omnibus (GEO) database, and processing the bulk RNA-seq counts data.\r\nThe readers are assumed to have certain degree of understanding of what the GEO database is.\r\nFinding Experiments of Interest\r\nGEO metadata repository: GEOmetadb\r\nGEOmetadb is a thin wrapper around a SQLite database into which all the most up-to-date NCBI GEO metadata that are associated with GEO samples (GSM), GEO platforms (GPL), GEO data series (GSE), and curated GEO datasets (GDS) are parsed.(Zhu et al. 2008) It enables querying the GEO database using R scripts without accessing the webpage. Although NCBI’s public API to the NCBI Entrez system The E-utilities also also offers an option for scripting queries for finding datasets of interest in the GEO database, the E-utilities are difficult to use (e.g. might need HTTP POST calls for long queries) and require extra effort to learn.\r\nTo install GEOmetadb via Bioconductor:\r\n\r\n\r\nif (!requireNamespace(\"GEOmetadb\", quietly = TRUE))\r\n    BiocManager::install(\"GEOmetadb\", ask = FALSE)\r\n\r\n\r\n\r\nWe will also create a directory ./data dedicated to storing data files under the working directory:\r\n\r\n\r\nif(!dir.exists(\"./data\")) {\r\n    dir.create(\"./data\", showWarnings = FALSE)\r\n}\r\n\r\n\r\n\r\nThen we download the SQLite database that has the GEO metadata into ./data via GEOmetadb:\r\n\r\n\r\n# Download GEOmeta database if not found\r\nmetadb <- file.path(\".\", \"data\", \"GEOmetadb.sqlite\")\r\nif(!file.exists(metadb)) {\r\n    ## avoid re-downloading the 11G database everytime running the script\r\n    metadb <- GEOmetadb::getSQLiteFile(destdir = \"./data\")\r\n}\r\n\r\n\r\n\r\nQuerying GEO database\r\nFor this demonstration, we are interested in experiments that:\r\nwere done in the recent 6 years\r\nare studies on COVID-19 (SARS-CoV-2)\r\nused native human cells or tissues\r\nhave RNA-seq data\r\nTo build an query to find experiments that meet the above conditions:\r\n\r\n\r\nquery <- paste(\r\n    \"SELECT DISTINCT\",\r\n    \"gse.title,\",\r\n    \"gse.gse,\",\r\n    \"gpl.title AS platform,\",\r\n    \"gse.submission_date,\",\r\n    \"gse.supplementary_file\",\r\n    \"FROM\",\r\n    \"gse\",\r\n    \"JOIN gse_gpl ON gse_gpl.gse = gse.gse\",\r\n    \"JOIN gpl ON gse_gpl.gpl = gpl.gpl\",\r\n    \"WHERE\",\r\n    \"gse.submission_date > '2015-01-01' AND\",           # not older than 6 years\r\n    \"gse.title LIKE '%SARS-CoV-2%' AND \",                  # experiment on COVID\r\n    \"gpl.organism LIKE '%Homo sapiens%' AND\", # dataset of human cells or tissue\r\n    \"gpl.technology LIKE '%high-throughput seq%'\")                # RNA-seq data\r\n\r\n\r\n\r\nThe ER diagram for the GEOmetadb SQLite database is represented as the following. This might come in useful when constructing an SQL statement querying the database.\r\nThe entity-relationship diagram for the GEOmetadb database (Zhu et al. 2008)For the GEO accession prefixes present in the figure:\r\nGSE: Series\r\nAn original submitter-supplied record that summarizes an experiment\r\nlinks together a group of related Samples and provides a focal point and description of the whole study\r\nmay also contain tables describing extracted data, summary conclusions, or analyses\r\n\r\nGSM: Sample\r\ndescribes the conditions under which an individual Sample was handled, the manipulations it underwent, and the abundance measurement of each element derived from it\r\n\r\nGPL: Platform\r\ncomposed of a summary description of the array or sequencer and, for array-based Platforms, a data table defining the array template\r\nmay reference many Samples that have been submitted by multiple submitters\r\n\r\nGDS: DataSet\r\nProfiles are derived from DataSets\r\nA Profile consists of the expression measurements for an individual gene across all Samples in a DataSet\r\n\r\n\r\nTo establish a connection with the SQLite database:\r\n\r\n\r\n# Establish connection to GEOmetadb.sqlite\r\ncon <- DBI::dbConnect(drv    = RSQLite::SQLite(),   ## an object of SQLiteDriver\r\n                      dbname = metadb)\r\n\r\n\r\n\r\nNote that packages DBI and RSQLite have already been implicitly installed as dependencies for GEOmetadb. Therefore we can directly make the function calls here.\r\nTo submit the query to the database:\r\n\r\n\r\nresult <- DBI::dbGetQuery(conn = con, statement = query) ## save query result\r\n\r\n\r\n\r\nClosing connection to the database:\r\n\r\n\r\nDBI::dbDisconnect(con) ## close connection\r\nrm(con) ## not a necessary step, just wanna keep my workspace clean\r\n\r\n\r\n\r\nFiltering Query Result\r\nThe SQL query result is returned as a list object by the wrapper function in R. The result should have the following columns:\r\n\r\n\r\nnames(result)\r\n\r\n\r\n[1] \"title\"              \"gse\"                \"platform\"          \r\n[4] \"submission_date\"    \"supplementary_file\"\r\n\r\nWe would like to select from only those experiments whose datasets contain RNA-seq count matrices:\r\n\r\n\r\nhasCounts <- result$supplementary_file[\r\n    grep(\r\n        result$supplementary_file,\r\n        pattern     = \"count\", ## keyword to look for in experiment data files\r\n        ignore.case = TRUE\r\n        )\r\n    ]\r\n\r\n\r\n\r\nThis extracts a vector of FTP links to the files that include RNA-seq counts. Then from the FTP links, we extract the GSE series numbers from their file names using regex:\r\n\r\n\r\nhasCounts_gse <- unlist(\r\n    regmatches(hasCounts,\r\n               regexec(\"GSE[0-9]{4,}[^/]\", hasCounts)\r\n    )\r\n)\r\nSELECT_ROWS       <- result$gse %in% hasCounts_gse\r\ncandidate_dataset <- result[SELECT_ROWS, ]\r\n\r\n\r\n\r\nThe GSE series numbers and titles of the qualified candidate experiments (candidate_dataset) that contain RNA-seq data are as follows:\r\n\r\n\r\n\r\n\r\n\r\ntitle\r\n\r\n\r\ngse\r\n\r\n\r\n1\r\n\r\n\r\nTranscriptional response of human lung epithelial cells to SARS-CoV-2 infection\r\n\r\n\r\nGSE147507\r\n\r\n\r\n2\r\n\r\n\r\nSARS-CoV-2 receptor ACE2 is an interferon-stimulated gene in human airway epithelial cells and is detected in specific cell subsets across tissues\r\n\r\n\r\nGSE148829\r\n\r\n\r\n3\r\n\r\n\r\nSARS-CoV-2 receptor ACE2 is an interferon-stimulated gene in human airway epithelial cells and is detected in specific cell subsets across tissues\r\n\r\n\r\nGSE148829\r\n\r\n\r\n5\r\n\r\n\r\nSpectrum of Viral Load and Host Response Seen in Autopsies of SARS-CoV-2 Infected Lungs\r\n\r\n\r\nGSE150316\r\n\r\n\r\n9\r\n\r\n\r\nRNA-Seq of Human iPSC-cardiomyocytes infected with SARS-CoV-2\r\n\r\n\r\nGSE150392\r\n\r\n\r\n10\r\n\r\n\r\nIn vivo antiviral host response to SARS-CoV-2 by viral load, sex, and age\r\n\r\n\r\nGSE152075\r\n\r\n\r\n12\r\n\r\n\r\nSeverely ill COVID-19 patients display a defective exhaustion program in SARS-CoV-2 reactive CD8+ T cells\r\n\r\n\r\nGSE153931\r\n\r\n\r\n13\r\n\r\n\r\nPrimary Human Airway Epithelial Cultures infected with SARS-CoV-2\r\n\r\n\r\nGSE153970\r\n\r\n\r\n14\r\n\r\n\r\nIn vivo antiviral host response to SARS-CoV-2 by viral load, sex, and age [dataset II]\r\n\r\n\r\nGSE154768\r\n\r\n\r\n15\r\n\r\n\r\nIn vivo antiviral host response to SARS-CoV-2 by viral load, sex, and age [dataset III]\r\n\r\n\r\nGSE154769\r\n\r\n\r\n22\r\n\r\n\r\nUpper airway gene expression differentiates COVID-19 from other acute respiratory illnesses and reveals suppression of innate immune responses by SARS-CoV-2\r\n\r\n\r\nGSE156063\r\n\r\n\r\n24\r\n\r\n\r\nAcute SARS-CoV-2 Infection in a Universal In Vivo Model for Potential Human Pandemic Coronaviruses is Cytopathic and Elicits a Robust and Sustained Host Innate Immune Response\r\n\r\n\r\nGSE155286\r\n\r\n\r\n25\r\n\r\n\r\nHuman Pluripotent Stem Cell-Derived Neural Cells and Brain Organoids Reveal SARS-CoV-2 Neurotropism Predominates in Choroid Plexus Epithelium\r\n\r\n\r\nGSE157852\r\n\r\n\r\n28\r\n\r\n\r\nExpression of SARS-CoV-2 receptor ACE2 and coincident host response signature varies by asthma inflammatory phenotype\r\n\r\n\r\nGSE158752\r\n\r\n\r\n30\r\n\r\n\r\nSARS-CoV-2 infected cells present HLA-I peptides from canonical and out-of-frame ORFs\r\n\r\n\r\nGSE159191\r\n\r\n\r\n31\r\n\r\n\r\nSARS-CoV-2 infected cells present HLA-I peptides from canonical and out-of-frame ORFs\r\n\r\n\r\nGSE159191\r\n\r\n\r\n34\r\n\r\n\r\nCardiomyocytes Infected by SARS-CoV-2 Recruit Cardiotoxic Macrophages [bulk RNA-seq dataset)\r\n\r\n\r\nGSE151879\r\n\r\n\r\n35\r\n\r\n\r\nCardiomyocytes Infected by SARS-CoV-2 Recruit Cardiotoxic Macrophages [bulk RNA-seq dataset)\r\n\r\n\r\nGSE151879\r\n\r\n\r\n42\r\n\r\n\r\nIdentification of required host factors for SARS-CoV-2 infection in human cells [RNA-seq]\r\n\r\n\r\nGSE159522\r\n\r\n\r\n44\r\n\r\n\r\nSARS-CoV-2 infection of primary human lung epithelium for COVID-19 modeling and drug discovery\r\n\r\n\r\nGSE155518\r\n\r\n\r\n48\r\n\r\n\r\nTemporal and Spatial Heterogeneity of Host Response to SARS-CoV-2 Pulmonary Infection [gene expression]\r\n\r\n\r\nGSE159787\r\n\r\n\r\n53\r\n\r\n\r\nSingle Nucleus RNA-Seq Multiomic Profiling Reveals Age-Dynamic Regulation of Host Genes Associated with SARS-CoV-2 Infection [scRNA-Seq]\r\n\r\n\r\nGSE161382\r\n\r\n\r\n56\r\n\r\n\r\nGenome-scale identification of SARS-CoV-2 and pan-coronavirus host factor networks\r\n\r\n\r\nGSE162038\r\n\r\n\r\n57\r\n\r\n\r\nFunctional interrogation of a SARS-CoV-2 host protein interactome identifies unique and shared coronavirus host factors\r\n\r\n\r\nGSE162039\r\n\r\n\r\n58\r\n\r\n\r\nMetabolic reprogramming and epigenetic changes of vital organs in SARS-CoV-2 induced systemic toxicity\r\n\r\n\r\nGSE162113\r\n\r\n\r\n59\r\n\r\n\r\nInfection of human Nasal Epithelial Cells with SARS-CoV-2 and a 382-nt deletion isolate<U+00A0>lacking ORF8<U+00A0>reveals similar viral kinetics and host transcriptional profiles\r\n\r\n\r\nGSE162131\r\n\r\n\r\n63\r\n\r\n\r\nTranscriptomic Similarities and Differences in Host Response between SARS-CoV-2 and Other Viral Infection\r\n\r\n\r\nGSE152641\r\n\r\n\r\n64\r\n\r\n\r\nBulk RNA sequencing of SARS-CoV-2 infected alveolar type I- and type II like cells\r\n\r\n\r\nGSE153218\r\n\r\n\r\n73\r\n\r\n\r\nIdentification of Drugs Blocking SARS-CoV-2 Infection using Human Pluripotent Stem Cell-derived Colonic Organoids\r\n\r\n\r\nGSE148696\r\n\r\n\r\n74\r\n\r\n\r\nResponse to SARS-CoV-2 infection in cornea, limbus and sclera from human donors\r\n\r\n\r\nGSE164073\r\n\r\n\r\n76\r\n\r\n\r\nDysregulated transcriptional responses to SARS-CoV-2 in the periphery support novel diagnostic approaches\r\n\r\n\r\nGSE161731\r\n\r\n\r\n78\r\n\r\n\r\nA Multiplexed, Next-Generation Sequencing Platform for High-Throughput Detection of SARS-CoV-2 [PoC cohort]\r\n\r\n\r\nGSE160031\r\n\r\n\r\n79\r\n\r\n\r\nA Multiplexed, Next-Generation Sequencing Platform for High-Throughput Detection of SARS-CoV-2 [test cohort]\r\n\r\n\r\nGSE160032\r\n\r\n\r\n80\r\n\r\n\r\nA Multiplexed, Next-Generation Sequencing Platform for High-Throughput Detection of SARS-CoV-2 [pilot cohort]\r\n\r\n\r\nGSE160033\r\n\r\n\r\n81\r\n\r\n\r\nA Multiplexed, Next-Generation Sequencing Platform for High-Throughput Detection of SARS-CoV-2 [extended cohort]\r\n\r\n\r\nGSE160034\r\n\r\n\r\n84\r\n\r\n\r\nSARS-CoV-2 infection of human pancreatic islets\r\n\r\n\r\nGSE159717\r\n\r\n\r\n94\r\n\r\n\r\nExpression profiling of SARS-CoV-2 infected patients by RNA-seq\r\n\r\n\r\nGSE154244\r\n\r\n\r\n\r\nWe choose GSE152641 from the candidate studies to be our experiment of interest for the following demonstration.\r\n\r\n\r\nseries <- \"GSE152641\" ## GEO series ID\r\n\r\n\r\n\r\nAlways read the publication of the original experiment and understand the experiment before starting the analysis.\r\nOverview of the chosen experiment\r\nThe original study of GSE152641(Thair et al. 2021) performed expression analysis on genes of these 86 samples and compiled expression data of prior studies on six viruses: influenza, RSV, HRV, Ebola, Dengue, and SARS in an attempt to isolate COVID-19 biomarkers from other viral infections. The RNA-seq data was generated by profiling peripheral blood from 62 COVID-19 patients and 24 healthy controls via bulk RNA-seq. The RNA-seq count matrix in the data file consists of 20460 unique Entrez gene ID’s along the rows and 86 samples (biological replicates) along the columns.\r\nDownloading Dataset\r\nGEOquery provides easy and quick methods for accessing data from GEO (Davis and Meltzer 2007):\r\n\r\n\r\nif (!requireNamespace(\"GEOquery\", quietly = TRUE))\r\n    BiocManager::install(\"GEOquery\", ask = FALSE)\r\n\r\n\r\n\r\nTo download the RNA-seq data file for the corresponding GSE series number from GEO:\r\n\r\n\r\n## Get names of data files\r\nfname <- GEOquery::getGEOSuppFiles(GEO           = series,\r\n                                   fetch_files   = FALSE,  ## Don't download yet\r\n                                   makeDirectory = FALSE)$fname\r\n\r\n## Download the dataset if it's never downloaded into the data directory\r\nif (!file.exists(file.path(getwd(), \"data\", fname))) {\r\n    GEOquery::getGEOSuppFiles(GEO           = series,\r\n                              baseDir       = \"./data\",\r\n                              makeDirectory = FALSE)\r\n}\r\n\r\n\r\n\r\nThe dataset file has been downloaded in ./data. Note that this experiment has only 1 supplementary file; some experiments could have more than just one. Therefore you might want to check what’s in fname or look up the GEO accession viewer before proceeding.\r\nRNA-seq Counts Normalisation\r\nNormalising RNA-seq counts is a necessary step of initial data processing prior to the differential expression analysis. The reason is that direct comparison of raw count values does not account for the effects of factors that introduce systematic errors such as different gene lengths and GC-content between genes within a biological replicate, different sequencing depth between biological replicates, and true biological differences in RNA composition between biological replicates, which have a significant impact on downstream analysis (e.g. differential expression analysis). The goal of normalisation is to minimise the effects of systematic errors by taking into account these factors.\r\nThere exist various normalisation methods. They come with different assumptions and correct for different factors. Evans, C., Hardin, J., and Stoebel, D. M. have published a detailed review on several common normalisation methods (DESeq, Med, Q, RPKM and ERPKM, TMM, UQ) and discussed how to choose the appropriate normalisation method based on their assumptions. (Evans, Hardin, and Stoebel 2016)\r\nHere we use the trimmed mean of M-values (TMM) normalisation method implemented in edgeR (Mark D. Robinson, McCarthy, and Smyth 2009)(McCarthy, Chen, and Smyth 2012a):\r\n\r\n\r\nif (!requireNamespace(\"edgeR\", quietly = TRUE))\r\n    BiocManager::install(\"edgeR\", ask = FALSE)\r\n\r\n\r\n\r\nTMM Normalisation\r\nThe TMM approach assumes the majority of genes are not differentially expressed. It takes into account sequencing depth, gene length, and RNA composition, making the normalised count values comparable within and between samples. Readers can consult the original publication of TMM normalisation for complete details of this method. (Mark D. Robinson and Oshlack 2010)\r\nThe following normalisation procedure is based on the edgeR differential expression analysis protocol, step 14. i-v. (Anders et al. 2013)\r\nLoading dataset\r\n\r\n\r\ncovid19_exp <- read.csv(\r\n    file        = file.path(\".\", \"data\", fname),\r\n    header      = TRUE,\r\n    check.names = FALSE ## prevent R from messing up column names\r\n)\r\n\r\n\r\n\r\nTo view the first 5 genes of the count matrix:\r\n\r\n\r\n\r\n\r\n\r\nIMX_sample00001\r\n\r\n\r\nIMX_sample00002\r\n\r\n\r\nIMX_sample00003\r\n\r\n\r\nIMX_sample00004\r\n\r\n\r\nIMX_sample00005\r\n\r\n\r\nIMX_sample00006\r\n\r\n\r\nIMX_sample00007\r\n\r\n\r\nIMX_sample00008\r\n\r\n\r\nIMX_sample00009\r\n\r\n\r\nIMX_sample00010\r\n\r\n\r\nIMX_sample00011\r\n\r\n\r\nIMX_sample00012\r\n\r\n\r\nIMX_sample00013\r\n\r\n\r\nIMX_sample00014\r\n\r\n\r\nIMX_sample00015\r\n\r\n\r\nIMX_sample00016\r\n\r\n\r\nIMX_sample00017\r\n\r\n\r\nIMX_sample00018\r\n\r\n\r\nIMX_sample00019\r\n\r\n\r\nIMX_sample00020\r\n\r\n\r\nIMX_sample00021\r\n\r\n\r\nIMX_sample00022\r\n\r\n\r\nIMX_sample00023\r\n\r\n\r\nIMX_sample00024\r\n\r\n\r\nIMX_sample00025\r\n\r\n\r\nIMX_sample00026\r\n\r\n\r\nIMX_sample00027\r\n\r\n\r\nIMX_sample00028\r\n\r\n\r\nIMX_sample00029\r\n\r\n\r\nIMX_sample00030\r\n\r\n\r\nIMX_sample00031\r\n\r\n\r\nIMX_sample00032\r\n\r\n\r\nIMX_sample00033\r\n\r\n\r\nIMX_sample00034\r\n\r\n\r\nIMX_sample00035\r\n\r\n\r\nIMX_sample00036\r\n\r\n\r\nIMX_sample00037\r\n\r\n\r\nIMX_sample00038\r\n\r\n\r\nIMX_sample00039\r\n\r\n\r\nIMX_sample00040\r\n\r\n\r\nIMX_sample00041\r\n\r\n\r\nIMX_sample00042\r\n\r\n\r\nIMX_sample00043\r\n\r\n\r\nIMX_sample00044\r\n\r\n\r\nIMX_sample00045\r\n\r\n\r\nIMX_sample00046\r\n\r\n\r\nIMX_sample00047\r\n\r\n\r\nIMX_sample00048\r\n\r\n\r\nIMX_sample00049\r\n\r\n\r\nIMX_sample00050\r\n\r\n\r\nIMX_sample00051\r\n\r\n\r\nIMX_sample00052\r\n\r\n\r\nIMX_sample00053\r\n\r\n\r\nIMX_sample00054\r\n\r\n\r\nIMX_sample00055\r\n\r\n\r\nIMX_sample00056\r\n\r\n\r\nIMX_sample00057\r\n\r\n\r\nIMX_sample00058\r\n\r\n\r\nIMX_sample00059\r\n\r\n\r\nIMX_sample00060\r\n\r\n\r\nIMX_sample00061\r\n\r\n\r\nIMX_sample00062\r\n\r\n\r\nIMX_sample00063\r\n\r\n\r\nIMX_sample00064\r\n\r\n\r\nIMX_sample00065\r\n\r\n\r\nIMX_sample00066\r\n\r\n\r\nIMX_sample00067\r\n\r\n\r\nIMX_sample00068\r\n\r\n\r\nIMX_sample00069\r\n\r\n\r\nIMX_sample00070\r\n\r\n\r\nIMX_sample00071\r\n\r\n\r\nIMX_sample00072\r\n\r\n\r\nIMX_sample00073\r\n\r\n\r\nIMX_sample00074\r\n\r\n\r\nIMX_sample00075\r\n\r\n\r\nIMX_sample00076\r\n\r\n\r\nIMX_sample00077\r\n\r\n\r\nIMX_sample00078\r\n\r\n\r\nIMX_sample00079\r\n\r\n\r\nIMX_sample00080\r\n\r\n\r\nIMX_sample00081\r\n\r\n\r\nIMX_sample00082\r\n\r\n\r\nIMX_sample00083\r\n\r\n\r\nIMX_sample00084\r\n\r\n\r\nIMX_sample00085\r\n\r\n\r\nIMX_sample00086\r\n\r\n\r\n1\r\n\r\n\r\n12\r\n\r\n\r\n1\r\n\r\n\r\n10\r\n\r\n\r\n12\r\n\r\n\r\n4\r\n\r\n\r\n12\r\n\r\n\r\n7\r\n\r\n\r\n14\r\n\r\n\r\n19\r\n\r\n\r\n11\r\n\r\n\r\n3\r\n\r\n\r\n11\r\n\r\n\r\n10\r\n\r\n\r\n7\r\n\r\n\r\n11\r\n\r\n\r\n27\r\n\r\n\r\n7\r\n\r\n\r\n4\r\n\r\n\r\n15\r\n\r\n\r\n9\r\n\r\n\r\n8\r\n\r\n\r\n8\r\n\r\n\r\n8\r\n\r\n\r\n5\r\n\r\n\r\n2\r\n\r\n\r\n5\r\n\r\n\r\n0\r\n\r\n\r\n2\r\n\r\n\r\n3\r\n\r\n\r\n12\r\n\r\n\r\n0\r\n\r\n\r\n10\r\n\r\n\r\n3\r\n\r\n\r\n3\r\n\r\n\r\n1\r\n\r\n\r\n7\r\n\r\n\r\n7\r\n\r\n\r\n7\r\n\r\n\r\n5\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n2\r\n\r\n\r\n6\r\n\r\n\r\n11\r\n\r\n\r\n0\r\n\r\n\r\n6\r\n\r\n\r\n6\r\n\r\n\r\n1\r\n\r\n\r\n3\r\n\r\n\r\n0\r\n\r\n\r\n9\r\n\r\n\r\n7\r\n\r\n\r\n0\r\n\r\n\r\n13\r\n\r\n\r\n2\r\n\r\n\r\n13\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\n4\r\n\r\n\r\n7\r\n\r\n\r\n6\r\n\r\n\r\n2\r\n\r\n\r\n11\r\n\r\n\r\n2\r\n\r\n\r\n4\r\n\r\n\r\n4\r\n\r\n\r\n8\r\n\r\n\r\n6\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\n5\r\n\r\n\r\n5\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n2\r\n\r\n\r\n0\r\n\r\n\r\n2\r\n\r\n\r\n3\r\n\r\n\r\n1\r\n\r\n\r\n4\r\n\r\n\r\n10\r\n\r\n\r\n0\r\n\r\n\r\n1\r\n\r\n\r\n4\r\n\r\n\r\n2\r\n\r\n\r\n2670\r\n\r\n\r\n2432\r\n\r\n\r\n781\r\n\r\n\r\n2381\r\n\r\n\r\n2622\r\n\r\n\r\n3273\r\n\r\n\r\n3969\r\n\r\n\r\n2597\r\n\r\n\r\n1692\r\n\r\n\r\n2571\r\n\r\n\r\n898\r\n\r\n\r\n1405\r\n\r\n\r\n1132\r\n\r\n\r\n1255\r\n\r\n\r\n1560\r\n\r\n\r\n585\r\n\r\n\r\n1075\r\n\r\n\r\n925\r\n\r\n\r\n2989\r\n\r\n\r\n6413\r\n\r\n\r\n999\r\n\r\n\r\n3950\r\n\r\n\r\n2192\r\n\r\n\r\n2810\r\n\r\n\r\n829\r\n\r\n\r\n1461\r\n\r\n\r\n900\r\n\r\n\r\n1261\r\n\r\n\r\n191\r\n\r\n\r\n1113\r\n\r\n\r\n57\r\n\r\n\r\n1609\r\n\r\n\r\n2674\r\n\r\n\r\n242\r\n\r\n\r\n776\r\n\r\n\r\n996\r\n\r\n\r\n904\r\n\r\n\r\n837\r\n\r\n\r\n943\r\n\r\n\r\n543\r\n\r\n\r\n1669\r\n\r\n\r\n651\r\n\r\n\r\n259\r\n\r\n\r\n1177\r\n\r\n\r\n954\r\n\r\n\r\n1871\r\n\r\n\r\n553\r\n\r\n\r\n1368\r\n\r\n\r\n646\r\n\r\n\r\n1607\r\n\r\n\r\n1021\r\n\r\n\r\n269\r\n\r\n\r\n1323\r\n\r\n\r\n1039\r\n\r\n\r\n471\r\n\r\n\r\n738\r\n\r\n\r\n872\r\n\r\n\r\n2245\r\n\r\n\r\n989\r\n\r\n\r\n2009\r\n\r\n\r\n591\r\n\r\n\r\n656\r\n\r\n\r\n107\r\n\r\n\r\n338\r\n\r\n\r\n1285\r\n\r\n\r\n850\r\n\r\n\r\n861\r\n\r\n\r\n3560\r\n\r\n\r\n4959\r\n\r\n\r\n1602\r\n\r\n\r\n1696\r\n\r\n\r\n1328\r\n\r\n\r\n1419\r\n\r\n\r\n475\r\n\r\n\r\n369\r\n\r\n\r\n736\r\n\r\n\r\n351\r\n\r\n\r\n1327\r\n\r\n\r\n1458\r\n\r\n\r\n557\r\n\r\n\r\n591\r\n\r\n\r\n824\r\n\r\n\r\n643\r\n\r\n\r\n1403\r\n\r\n\r\n393\r\n\r\n\r\n1009\r\n\r\n\r\n9\r\n\r\n\r\n77\r\n\r\n\r\n129\r\n\r\n\r\n87\r\n\r\n\r\n98\r\n\r\n\r\n81\r\n\r\n\r\n86\r\n\r\n\r\n124\r\n\r\n\r\n74\r\n\r\n\r\n68\r\n\r\n\r\n103\r\n\r\n\r\n82\r\n\r\n\r\n104\r\n\r\n\r\n54\r\n\r\n\r\n66\r\n\r\n\r\n50\r\n\r\n\r\n31\r\n\r\n\r\n81\r\n\r\n\r\n112\r\n\r\n\r\n347\r\n\r\n\r\n192\r\n\r\n\r\n192\r\n\r\n\r\n135\r\n\r\n\r\n94\r\n\r\n\r\n122\r\n\r\n\r\n153\r\n\r\n\r\n194\r\n\r\n\r\n129\r\n\r\n\r\n130\r\n\r\n\r\n80\r\n\r\n\r\n273\r\n\r\n\r\n53\r\n\r\n\r\n140\r\n\r\n\r\n96\r\n\r\n\r\n90\r\n\r\n\r\n91\r\n\r\n\r\n79\r\n\r\n\r\n108\r\n\r\n\r\n131\r\n\r\n\r\n100\r\n\r\n\r\n91\r\n\r\n\r\n54\r\n\r\n\r\n96\r\n\r\n\r\n68\r\n\r\n\r\n104\r\n\r\n\r\n62\r\n\r\n\r\n101\r\n\r\n\r\n100\r\n\r\n\r\n119\r\n\r\n\r\n137\r\n\r\n\r\n94\r\n\r\n\r\n88\r\n\r\n\r\n99\r\n\r\n\r\n97\r\n\r\n\r\n144\r\n\r\n\r\n101\r\n\r\n\r\n95\r\n\r\n\r\n112\r\n\r\n\r\n107\r\n\r\n\r\n71\r\n\r\n\r\n72\r\n\r\n\r\n76\r\n\r\n\r\n125\r\n\r\n\r\n81\r\n\r\n\r\n148\r\n\r\n\r\n125\r\n\r\n\r\n98\r\n\r\n\r\n113\r\n\r\n\r\n111\r\n\r\n\r\n96\r\n\r\n\r\n101\r\n\r\n\r\n76\r\n\r\n\r\n122\r\n\r\n\r\n140\r\n\r\n\r\n84\r\n\r\n\r\n121\r\n\r\n\r\n106\r\n\r\n\r\n59\r\n\r\n\r\n134\r\n\r\n\r\n90\r\n\r\n\r\n141\r\n\r\n\r\n75\r\n\r\n\r\n59\r\n\r\n\r\n82\r\n\r\n\r\n91\r\n\r\n\r\n48\r\n\r\n\r\n25\r\n\r\n\r\n10\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n9\r\n\r\n\r\n0\r\n\r\n\r\n2\r\n\r\n\r\n2\r\n\r\n\r\n4\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n2\r\n\r\n\r\n0\r\n\r\n\r\n1\r\n\r\n\r\n5\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n1\r\n\r\n\r\n2\r\n\r\n\r\n8\r\n\r\n\r\n0\r\n\r\n\r\n2\r\n\r\n\r\n2\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n14\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n2\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n10\r\n\r\n\r\n7\r\n\r\n\r\n0\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n9\r\n\r\n\r\n2\r\n\r\n\r\n3\r\n\r\n\r\n2\r\n\r\n\r\n0\r\n\r\n\r\n6\r\n\r\n\r\n3\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n6\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n1\r\n\r\n\r\n5\r\n\r\n\r\n4\r\n\r\n\r\n0\r\n\r\n\r\n4\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n1\r\n\r\n\r\n11\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n12\r\n\r\n\r\n0\r\n\r\n\r\n4\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\n6\r\n\r\n\r\n5\r\n\r\n\r\n0\r\n\r\n\r\n4\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n5\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n2\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\n7\r\n\r\n\r\n0\r\n\r\n\r\n2\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n5\r\n\r\n\r\n7\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n6\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n2\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n4\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n4\r\n\r\n\r\n2\r\n\r\n\r\n4\r\n\r\n\r\n0\r\n\r\n\r\n12\r\n\r\n\r\n4\r\n\r\n\r\n1\r\n\r\n\r\n3\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n5\r\n\r\n\r\n0\r\n\r\n\r\n5\r\n\r\n\r\n0\r\n\r\n\r\n2\r\n\r\n\r\n0\r\n\r\n\r\n12\r\n\r\n\r\n3\r\n\r\n\r\n5\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\n3\r\n\r\n\r\n1\r\n\r\n\r\n5\r\n\r\n\r\n0\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n\r\nNote that the name for the column of gene ID’s is blank. Label the column to avoid confusion:\r\n\r\n\r\ncolnames(covid19_exp)[1] <- \"entrezgene_id\" ## genes were labeled w/ Entrez ID's\r\n\r\n\r\n\r\nDefining group\r\nThis is an experiment with a simple design: a simple comparison between two sample groups: COVID-19 and HC.(Thair et al. 2021)\r\nFor most experiments in the GEO database, groups to which samples belong are usually indicated in samples’ titles. This means we are able to define groups for samples using regex to check their titles, which are the column names of the count matrix.\r\nIt used to be the case for GSE152641. Samples that are in the healthy control group had BRH or HMN prefix in their titles, and those in the COVID-19 group had ESC prefix. However, the author of GSE152641 recently replaced the prefix in all of the samples’ title with IMX_sample; in fact they changed the whole samples’ titles. This means we can no longer identify samples’ groups from their titles. The only way to find out their groups is look up their GSM accession numbers. Indeed, checking them one at a time on the GEO accession viewer and manually grouping them are lame.\r\nWe can again turn to GEOquery for retrieving samples’ metadata associated with their GSM accession numbers:\r\n\r\n\r\ngse <- GEOquery::getGEO(GEO = series, GSEMatrix = FALSE)\r\ngsm <- GEOquery::GSMList(gse)\r\n\r\n\r\n\r\nThe metadata of the experiment GSE152641 in the GEO database is in the SOFT format. GEOquery can parse the metadata of GSE152641 into GSE class, and each sample’s GSM data is in the list under the GSE object.\r\nTo view the first 5 samples’ GSM accession numbers:\r\n\r\n\r\nhead(names(gsm), n = 5)\r\n\r\n\r\n[1] \"GSM4622627\" \"GSM4622628\" \"GSM4622629\" \"GSM4622630\" \"GSM4622631\"\r\n\r\nAnd the metadata that we need from the first sample:\r\n\r\n\r\nGEOquery::Meta(gsm[[1]])[c(2, 31)]\r\n\r\n\r\n$characteristics_ch1\r\n[1] \"disease: Healthy control\" \"tissue: Whole blood\"     \r\n[3] \"age: 46\"                  \"Sex: Male\"               \r\n\r\n$title\r\n[1] \"IMX_sample00001\"\r\n\r\nKnowing these two pieces of information for each sample of the experiment, we are now able to define groups for the samples in R. The most R-ish way I’ve come up with so far without using for-loop:\r\n\r\n\r\nsamples <- lapply(gsm,\r\n                  function(x) {\r\n                      group  <- unlist(\r\n                          regmatches(GEOquery::Meta(x)$characteristics_ch1[1],\r\n                                     regexec(\r\n                                         pattern = \"(\\\\s).*\",  ## match by space\r\n                                         GEOquery::Meta(x)$characteristics_ch1[1])\r\n                                     )\r\n                          )[1] ## using regex to extract sample group\r\n                      ## remove space at the beginning of a string\r\n                      group  <- gsub(pattern = \"^\\\\s\", \"\", group)\r\n                      sample <- GEOquery::Meta(x)$title\r\n                      return(\r\n                          data.frame(\r\n                              sample      = sample,\r\n                              group       = group,\r\n                              check.names = FALSE\r\n                              )\r\n                          )\r\n                    }\r\n                  )\r\nsamples <- do.call(rbind, samples) ## combine the elements of a list\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nsample\r\n\r\n\r\ngroup\r\n\r\n\r\nGSM4622627\r\n\r\n\r\nIMX_sample00001\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622628\r\n\r\n\r\nIMX_sample00002\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622629\r\n\r\n\r\nIMX_sample00003\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622630\r\n\r\n\r\nIMX_sample00004\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622631\r\n\r\n\r\nIMX_sample00005\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622632\r\n\r\n\r\nIMX_sample00006\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622633\r\n\r\n\r\nIMX_sample00007\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622634\r\n\r\n\r\nIMX_sample00008\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622635\r\n\r\n\r\nIMX_sample00009\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622636\r\n\r\n\r\nIMX_sample00010\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622637\r\n\r\n\r\nIMX_sample00011\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622638\r\n\r\n\r\nIMX_sample00012\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622639\r\n\r\n\r\nIMX_sample00013\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622640\r\n\r\n\r\nIMX_sample00014\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622641\r\n\r\n\r\nIMX_sample00015\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622642\r\n\r\n\r\nIMX_sample00016\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622643\r\n\r\n\r\nIMX_sample00017\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622644\r\n\r\n\r\nIMX_sample00018\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622645\r\n\r\n\r\nIMX_sample00019\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622646\r\n\r\n\r\nIMX_sample00020\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622647\r\n\r\n\r\nIMX_sample00021\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622648\r\n\r\n\r\nIMX_sample00022\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622649\r\n\r\n\r\nIMX_sample00023\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622650\r\n\r\n\r\nIMX_sample00024\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622651\r\n\r\n\r\nIMX_sample00025\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622652\r\n\r\n\r\nIMX_sample00026\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622653\r\n\r\n\r\nIMX_sample00027\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622654\r\n\r\n\r\nIMX_sample00028\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622655\r\n\r\n\r\nIMX_sample00029\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622656\r\n\r\n\r\nIMX_sample00030\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622657\r\n\r\n\r\nIMX_sample00031\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622658\r\n\r\n\r\nIMX_sample00032\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622659\r\n\r\n\r\nIMX_sample00033\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622660\r\n\r\n\r\nIMX_sample00034\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622661\r\n\r\n\r\nIMX_sample00035\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622662\r\n\r\n\r\nIMX_sample00036\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622663\r\n\r\n\r\nIMX_sample00037\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622664\r\n\r\n\r\nIMX_sample00038\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622665\r\n\r\n\r\nIMX_sample00039\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622666\r\n\r\n\r\nIMX_sample00040\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622667\r\n\r\n\r\nIMX_sample00041\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622668\r\n\r\n\r\nIMX_sample00042\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622669\r\n\r\n\r\nIMX_sample00043\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622670\r\n\r\n\r\nIMX_sample00044\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622671\r\n\r\n\r\nIMX_sample00045\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622672\r\n\r\n\r\nIMX_sample00046\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622673\r\n\r\n\r\nIMX_sample00047\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622674\r\n\r\n\r\nIMX_sample00048\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622675\r\n\r\n\r\nIMX_sample00049\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622676\r\n\r\n\r\nIMX_sample00050\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622677\r\n\r\n\r\nIMX_sample00051\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622678\r\n\r\n\r\nIMX_sample00052\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622679\r\n\r\n\r\nIMX_sample00053\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622680\r\n\r\n\r\nIMX_sample00054\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622681\r\n\r\n\r\nIMX_sample00055\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622682\r\n\r\n\r\nIMX_sample00056\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622683\r\n\r\n\r\nIMX_sample00057\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622684\r\n\r\n\r\nIMX_sample00058\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622685\r\n\r\n\r\nIMX_sample00059\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622686\r\n\r\n\r\nIMX_sample00060\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622687\r\n\r\n\r\nIMX_sample00061\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622688\r\n\r\n\r\nIMX_sample00062\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622689\r\n\r\n\r\nIMX_sample00063\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622690\r\n\r\n\r\nIMX_sample00064\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622691\r\n\r\n\r\nIMX_sample00065\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622692\r\n\r\n\r\nIMX_sample00066\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622693\r\n\r\n\r\nIMX_sample00067\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622694\r\n\r\n\r\nIMX_sample00068\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622695\r\n\r\n\r\nIMX_sample00069\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622696\r\n\r\n\r\nIMX_sample00070\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622697\r\n\r\n\r\nIMX_sample00071\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622698\r\n\r\n\r\nIMX_sample00072\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622699\r\n\r\n\r\nIMX_sample00073\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622700\r\n\r\n\r\nIMX_sample00074\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622701\r\n\r\n\r\nIMX_sample00075\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622702\r\n\r\n\r\nIMX_sample00076\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622703\r\n\r\n\r\nIMX_sample00077\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622704\r\n\r\n\r\nIMX_sample00078\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622705\r\n\r\n\r\nIMX_sample00079\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622706\r\n\r\n\r\nIMX_sample00080\r\n\r\n\r\nCOVID19\r\n\r\n\r\nGSM4622707\r\n\r\n\r\nIMX_sample00081\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622708\r\n\r\n\r\nIMX_sample00082\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622709\r\n\r\n\r\nIMX_sample00083\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622710\r\n\r\n\r\nIMX_sample00084\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622711\r\n\r\n\r\nIMX_sample00085\r\n\r\n\r\nHealthy control\r\n\r\n\r\nGSM4622712\r\n\r\n\r\nIMX_sample00086\r\n\r\n\r\nHealthy control\r\n\r\n\r\n\r\nNormalising counts\r\nCreate a numeric matrix of the read counts with the gene ID’s as row names:\r\n\r\n\r\ncounts           <- as.matrix(covid19_exp[2:87])\r\nrownames(counts) <- covid19_exp$entrezgene_id\r\n\r\n\r\n\r\nAccording to the edgeR differential expression analysis protocol(Anders et al. 2013):\r\n\r\n“it is recommended to remove features without at least 1 read per million in n of the samples, where n is the size of the smallest group of replicates”\r\n\r\nSince we have only two groups: 24 healthy human controls and 62 COVID-19 patients, 24 is the size is the smallest group of biological replicates here:\r\n\r\n\r\ncpms <- edgeR::cpm(counts)\r\nkeep <- rowSums(cpms > 1) >= 24\r\n\r\n\r\n\r\n\r\n\r\ncounts <- counts[keep, ]\r\n\r\n\r\n\r\nedgeR stores data in its own data class DGEList and performs analyses on it. Hence we need to first create a DGEList to store the read counts.\r\nNote that although the edgeR documentation says the DGEList constructor takes a numeric matrix for its counts argument, the edgeR user guide says the counts argument can take either a matrix or a data.frame object.\r\n\r\n\r\nd <- edgeR::DGEList(\r\n  counts = counts,\r\n  group  = samples$group ## add the grouping factor\r\n  )\r\n\r\n\r\n\r\nTo estimate the scale factors between samples for TMM normalization:\r\n\r\n\r\nd <- edgeR::calcNormFactors(d)\r\n\r\n\r\n\r\nExtract the normalised count matrix:\r\n\r\n\r\nnormalised_counts <- edgeR::cpm(d)\r\n\r\n\r\n\r\nDistribution for read counts - Before vs. after normalisation\r\nEven though we are comparing the distributions for pre-normalised read counts and post-normalised read counts, we still normalise the pre-normalised read counts to counts per million (CPM) to account for differences in library sizes between samples for a comparable result. More precisely, we are comparing the distributions for two-fold changes in expression before and after TMM normalisation. Note that genes that were previously removed according to the protocol are also excluded in this comparison.\r\n\r\n\r\nShow code\r\n\r\npar(mfrow = c(1, 2))\r\n\r\nboxplot(log2(counts),\r\n        xlab     = \"Samples\",\r\n        ylab     = \"log2 CPM\",\r\n        las      = 2,\r\n        cex      = 0.5,\r\n        cex.lab  = 0.75,\r\n        cex.axis = 0.25,\r\n        main     = \"Before TMM Normalisation\",\r\n        cex.main = 0.75)\r\n\r\n#draw the median on each box plot\r\nabline(h   = median(apply(log2(counts), MARGIN = 2, FUN = median)),\r\n       col = \"green\",\r\n       lwd = 0.75,\r\n       lty = 2)\r\n\r\nboxplot(log2(normalised_counts),\r\n        xlab     = \"Samples\",\r\n        ylab     = \"log2 CPM\",\r\n        las      = 2,\r\n        cex      = 0.5,\r\n        cex.lab  = 0.75,\r\n        cex.axis = 0.25,\r\n        main     = \"After TMM Normalisation\",\r\n        cex.main = 0.75)\r\n# draw the median on each box plot\r\nabline(h   = median(apply(log2(normalised_counts), MARGIN = 2,FUN = median)),\r\n       col = \"green\",\r\n       lwd = 0.75,\r\n       lty = 2)\r\n\r\n\r\n\r\n\r\n\r\n\r\nShow code\r\n\r\npar(mfrow = c(1, 2))\r\n\r\nlog2CPM_density <- apply(log2(counts),\r\n                         MARGIN = 2,\r\n                         FUN    = density)\r\n\r\n## Get the normalised fold change cpm\r\nnormalised_log2CPM_density <- apply(log2(normalised_counts),\r\n                                    MARGIN = 2,\r\n                                    FUN    = density)\r\n\r\n## Calculate the limits across all the samples\r\nxlim <- 0; ylim <- 0\r\nfor (i in seq_along(log2CPM_density)) {\r\n    xlim <- range(c(xlim, log2CPM_density[[i]]$x))\r\n    ylim <- range(c(ylim, log2CPM_density[[i]]$y))\r\n}\r\nfor (i in seq_along(normalised_log2CPM_density)) {\r\n    xlim <- range(c(xlim, normalised_log2CPM_density[[i]]$x))\r\n    ylim <- range(c(ylim, normalised_log2CPM_density[[i]]$y))\r\n}\r\n\r\n## 86 line colours for all 86 samples\r\ncols <- rainbow(length(log2CPM_density))\r\n## choose line type 1 for density graphs of all 86 samples\r\nltys <- rep(1, length(log2CPM_density))\r\n\r\n## Initialize the density plot without density lines\r\nplot(log2CPM_density[[1]],\r\n     xlim     = xlim,\r\n     ylim     = ylim,\r\n     type     = \"n\",\r\n     ylab     = \"Smoothing density of log2-CPM\",\r\n     main     = \"Before TMM normalisation\",\r\n     cex.main = 0.7,\r\n     cex.lab  = 0.75\r\n     )\r\n## Plot smoothing density for each sample\r\nfor (i in seq_along(log2CPM_density)) {\r\n    lines(log2CPM_density[[i]],\r\n          col = cols[i])\r\n    }\r\n## Create legend for samples\r\nlegend(\"topright\",\r\n       colnames(counts),\r\n       col      = cols,\r\n       lty      = ltys,\r\n       cex      = 0.15,\r\n       border   = \"blue\",\r\n       text.col = \"green4\",\r\n       merge    = TRUE,\r\n       bg       = \"gray90\")\r\n\r\n\r\n\r\n\r\n\r\n## Initialize the density plot without density lines\r\nplot(normalised_log2CPM_density[[1]],\r\n     xlim     = xlim,\r\n     ylim     = ylim,\r\n     type     = \"n\",\r\n     ylab     = \"Smoothing density of log2-CPM\",\r\n     main     = \"After TMM normalisation\",\r\n     cex.main = 0.65,\r\n     cex.lab  = 0.75,\r\n     )\r\n\r\n## Plot smoothing density for each sample\r\nfor (i in seq_along(normalised_log2CPM_density)) {\r\n    lines(normalised_log2CPM_density[[i]],\r\n          col = cols[i])\r\n    }\r\n## Create legend for samples\r\nlegend(\"topright\",\r\n       colnames(normalised_counts),\r\n       col      = cols,\r\n       lty      = ltys,\r\n       cex      = 0.15,\r\n       border   = \"blue\",\r\n       text.col = \"green4\",\r\n       merge    = TRUE,\r\n       bg       = \"gray90\")\r\n\r\n\r\n\r\n\r\nThe medians of distributions for normalised RNA-seq counts are much closer to each other. The interquartile ranges for the gene expression levels of each sample also become more consistent after normalisation applied. This means 50% of gene expression levels have similar distributions for each sample.\r\nPost-normalisation Analysis\r\nBiological coefficient of variation (BCV)\r\nTo capture the variability in gene expressions between sample groups, we use group as target to build a model matrix:\r\n\r\n\r\nmodel_design <- model.matrix(~group, data = samples)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n(Intercept)\r\n\r\n\r\ngroupHealthy control\r\n\r\n\r\nGSM4622627\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622628\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622629\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622630\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622631\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622632\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622633\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622634\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622635\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622636\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622637\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622638\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622639\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622640\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622641\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622642\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622643\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622644\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622645\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622646\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622647\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622648\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622649\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622650\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622651\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622652\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622653\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622654\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622655\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622656\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622657\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622658\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622659\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622660\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622661\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622662\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622663\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622664\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622665\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622666\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622667\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622668\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622669\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622670\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622671\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622672\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622673\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622674\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622675\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622676\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622677\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622678\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622679\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622680\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622681\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622682\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622683\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622684\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622685\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622686\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622687\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622688\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622689\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622690\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622691\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622692\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622693\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622694\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622695\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622696\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622697\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622698\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622699\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622700\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622701\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622702\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622703\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622704\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622705\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622706\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\nGSM4622707\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622708\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622709\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622710\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622711\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\nGSM4622712\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\n\r\n\r\n\r\nShow code\r\n\r\nd <- edgeR::estimateDisp(d, design = model_design)\r\nedgeR::plotBCV(d, col.tagwise = \"black\", col.common = \"red\",\r\n               main = \"Common and Tag-wise Dispersion vs Expression Levels\")\r\n\r\n\r\n\r\n\r\nDispersion is a parameter of a negative binomial model that describes how much variance deviates from the mean, while the BCV is the square root of the dispersion parameter under the negative binomial model.\r\nThe BCV plot presents the estimated relative variability of expression between biological replicates; it illustrates the association between the biological CV and the average true gene abundance.\r\nThe common dispersion line suggests all gene expression values vary by close to a BCV value of 0.5 among replicates.(McCarthy, Chen, and Smyth 2012b) The tag-wise dispersion shows BCV values calculated individually for each gene. We observe that genes with higher true abundance (under the assumption that RNA-seq counts follow a negative binomial distribution) have lower BCV’s than genes with lower abundance. This implies that the higher the true expression level of a gene has, the lower its variation in our samples.\r\nMean-variance relationship\r\n\r\n\r\nShow code\r\n\r\nedgeR::plotMeanVar(\r\n    object                       = d,\r\n    show.raw.vars                = TRUE,\r\n    show.tagwise.vars            = TRUE,\r\n    NBline                       = TRUE,\r\n    show.ave.raw.vars            = TRUE,\r\n    show.binned.common.disp.vars = TRUE,\r\n    main                         = paste(\r\n        \"Mean-variance Relationship for 14425 Genes of\",\r\n        \"COVID-19 Group and Healthy Control Group\"),\r\n    cex.main                     = 0.8\r\n)\r\n\r\n\r\n\r\n\r\nThe mean-variance plot presents the modelling of the mean-variance relationship for the normalised expression values, which are split into bins by overall expression level in the model. The grey points represent the pooled gene-wise variances. The blue points on the mean-variance plot represent the estimated gene-wise variances. The red crosses represent the pooled gene-wise variances, while the dark red crosses represent the the average of the pooled variances for each bin of genes plotted against the average expression level of the genes in the bin. The blue line shows the mean-variance relationship for a negative binomial model with common dispersion.(Mark D. Robinson, McCarthy, and Smyth 2009)(McCarthy, Chen, and Smyth 2012a) We observe that all types of variances fit well along the negative binomial line.\r\nSample relations\r\n\r\n\r\nShow code\r\n\r\nedgeR::plotMDS.DGEList(\r\n    d,\r\n    col      = c(\"#b7371d\", \"#51af84\")[factor(samples$group)],\r\n    cex.axis = 0.75,\r\n    cex.lab  = 0.75,\r\n    main     = paste(\"Variation between Samples in Expression Level\")\r\n    )\r\nlegend(\"topleft\",\r\n       lwd      = 2,\r\n       text.col = c(\"#51af84\",\"#b7371d\"),\r\n       legend   = c(\"Healthy control\", \"COVID19\"),\r\n       lty      = 0,\r\n       cex      = 0.75)\r\n\r\n\r\n\r\n\r\nThe MDS plot presents variation among samples based on the normalised gene expression. The distances between each pair of samples on the MDS plot suggest how different these samples are in terms of log fold changes of the expression levels of the filtered genes. The healthy control and the COVID-19 patient samples form separate clusters along the plot in the leading logFC dimension 1.\r\nTo Do\r\nAs the genes in this dataset were labeled with Entrez gene ID’s, before performing any further analyses with the processed RNA-seq data, we need to map them to their HGNC names, which are how genes are referred in most annotation datasets and literatures, and more meaningful than simply numerical ID’s. This step is supposed to be part of the initial processing; however, mappings produced by different databases vary in quality. I will compare the mapping results produced by 3 different databases and finish converting gene ID’s in a later post.\r\n\r\n\r\n\r\nAnders, Simon, Davis Mccarthy, Yunshun Chen, Michal Okoniewski, Gordon Smyth, Wolfgang Huber, and Mark Robinson. 2013. “Count-Based Differential Expression Analysis of RNA Sequencing Data Using r and Bioconductor.” Nature Protocols 8 (September): 1765–86. https://doi.org/10.1038/nprot.2013.099.\r\n\r\n\r\nDavis, Sean, and Paul S. Meltzer. 2007. “GEOquery: a bridge between the Gene Expression Omnibus (GEO) and BioConductor.” Bioinformatics 23 (14): 1846–47. https://doi.org/10.1093/bioinformatics/btm254.\r\n\r\n\r\nEvans, Ciaran, Johanna Hardin, and Daniel Stoebel. 2016. “Selecting Between-Sample RNA-Seq Normalization Methods from the Perspective of Their Assumptions.” Briefings in Bioinformatics 19 (September). https://doi.org/10.1093/bib/bbx008.\r\n\r\n\r\nMcCarthy, Davis J., Yunshun Chen, and Gordon K. Smyth. 2012a. “Differential expression analysis of multifactor RNA-Seq experiments with respect to biological variation.” Nucleic Acids Research 40 (10): 4288–97. https://doi.org/10.1093/nar/gks042.\r\n\r\n\r\n———. 2012b. “Differential expression analysis of multifactor RNA-Seq experiments with respect to biological variation.” Nucleic Acids Research 40 (10): 4288–97. https://doi.org/10.1093/nar/gks042.\r\n\r\n\r\nRobinson, Mark D., Davis J. McCarthy, and Gordon K. Smyth. 2009. “edgeR: a Bioconductor package for differential expression analysis of digital gene expression data.” Bioinformatics 26 (1): 139–40. https://doi.org/10.1093/bioinformatics/btp616.\r\n\r\n\r\nRobinson, Mark D, and Alicia Oshlack. 2010. “A Scaling Normalization Method for Differential Expression Analysis of RNA-Seq Data.” Genome Biology 11 (3): 1–9.\r\n\r\n\r\nThair, Simone A., Yudong D. He, Yehudit Hasin-Brumshtein, Suraj Sakaram, Rushika Pandya, Jiaying Toh, David Rawling, et al. 2021. “Transcriptomic Similarities and Differences in Host Response Between SARS-CoV-2 and Other Viral Infections.” iScience 24 (1): 101947. https://doi.org/https://doi.org/10.1016/j.isci.2020.101947.\r\n\r\n\r\nZhu, Yuelin, Sean Davis, Robert Stephens, Paul S. Meltzer, and Yidong Chen. 2008. “GEOmetadb: powerful alternative search engine for the Gene Expression Omnibus.” Bioinformatics 24 (23): 2798–2800. https://doi.org/10.1093/bioinformatics/btn520.\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-07-05-geo-datasets-experiment-selection-and-initial-processing/geo.gif",
    "last_modified": "2021-07-05T21:15:00-04:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-06-03-setting-up-r-for-bioinformatics-workflows/",
    "title": "Setting Up R for Bioinformatics Workflows",
    "description": "A Windows user oriented guide to the initial set-up for R.",
    "author": [
      {
        "name": "Feifei Li",
        "url": {}
      }
    ],
    "date": "2021-06-03",
    "categories": [
      "R",
      "bioconductor"
    ],
    "contents": "\r\n\r\nContents\r\nR Setup\r\nR Version\r\nR Package Directory\r\n\r\nBioconductor\r\nBiocManager\r\nPackages\r\n\r\nR Startup Behaviour\r\nTab Width\r\n.First\r\n.Last\r\n\r\nWriting at the end\r\n\r\nI decided to write this because some of the steps in setting up R for the new version of Bioconductor could get painful on Windows, and they never teach you this in school. On UNIX/Linux getting things set up could simply take one or two commands.\r\nR Setup\r\nTo readers who would like to follow the guide to set up R step-by-step, I recommend you set up the package directory first (see R Package Directory) if you have never done so.\r\nR Version\r\nWe are going to use Bioconductor extensively in various bioinformatics workflows. Each version of Bioconductor has different requirements for R version (see Bioconductor). Here I decide to use the latest version of Bioconductor (till the date this post is created), which requires R version 4.1.0 or higher.\r\nTo check if you have the right version of R installed:\r\n\r\n\r\n## Get the current version of R on your computer\r\nRver <- unlist(\r\n    regmatches(R.version.string,\r\n               regexec(\"(\\\\d+).(\\\\d+).(\\\\d+)\", R.version.string)\r\n    )\r\n)[1]\r\n## Update R if your R version is below the requirement\r\nif (Rver <= \"4.1.0\") {\r\n    if (!requireNamespace(\"installr\", quietly = TRUE)) {\r\n        if(!requireNamespace(\"devtools\", quietly = TRUE)) {\r\n            ## install installr from CRAN if no devtools\r\n            install.packages(\"installr\")\r\n        } else {\r\n            ## use devtools to install the latest installr version from GitHub\r\n            devtools::install_github('talgalili/installr')\r\n        }\r\n    }\r\n    installr::updateR()\r\n}\r\n\r\n\r\n\r\nrequireNamespace(“installr”) checks whether the package installr was already installed in R before. It returns a boolean value indicating whether the package was installed, along with a message prompted in R console if you didn’t set quitely = TRUE. You might have seen many people uses require(), which also returns a boolean value. The difference is, require also automatically loads the package if installed, or downloads if not. This means using requireNamespace(“installr”) is always a better option for checking package installation. You should always avoid load().\r\nI didn’t load the package with library(package.name) to use the function in the package, which is commonly what people do. Instead, I call the function by package.name::function.name(), and I encourage the readers to do this because it explicitly tells those people who are reading your code from which packages those functions come from. It might also help you understand better when you come back to look at your code. I prefer to keep things explicitly because it avoids confusions. However, there indeed exists exceptions where a package is required to be loaded using library(), which we will see later when we try to map HGNC symbols from Entrez ID’s.\r\nEnough of lecturing, we come back to the R setup itself. Once the code above is run, you will be prompted to install the latest version of R if the current version of R on your computer does not meet the requirement. Once the installation is complete, restart RStudio. Don’t just use the Session > Restart R because it won’t switch to the latest installed R version in RStudio. In the new R session, check your package library directory with .libpaths() as the newly updated R will change it to the R version specific directory. If the User installation was selected during the installation, the directory could be C:$env:USERNAME-library. If the default system installation was selected, it could be C:Files.0. Sometimes it ends up in X:\\{your R directory}.0.\r\nYou might want to change it if these are not what you want.\r\nR Package Directory\r\nFor me, I have a dedicated directory for R packages. This way, I won’t need to suffer from re-installing or migrating R packages from the previous version of R after an update. To change the default R package directory, enter the following in PowerShell:\r\n\r\nAdd-Content C:\\Users\\$env:USERNAME\\Documents\\.Renviron R_LIBS=\"{path to your package directory}\"\r\nAdd-Content C:\\Users\\$env:USERNAME\\Documents\\.Renviron R_LIBS_USER=\"{path to your package directory}\\\\user\"\r\nAdd-Content C:\\Users\\$env:USERNAME\\Documents\\.Renviron R_LIBS_SITE=\"{path to your package directory}\\\\site\"\r\n\r\nDon’t forget double slashes in the directory path.\r\nIf this is your first time setting up a default package library, after the update you will have to re-install knitr and rmarkdown.\r\nBioconductor\r\nA must-have for bioinformatics workflows.\r\nBiocManager\r\nHere we will install the latest release of Bioconductor 3.13:\r\n\r\n\r\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\r\n    install.packages(\"BiocManager\")\r\nBiocManager::install(version = \"3.13\")\r\n\r\n\r\n\r\nIt doesn’t get you the whole Bioconductor installed. This is because Bioconductor itself is not really “a piece of software,” but a collection of over 1000 R packages,(Gentleman et al. 2004) which takes forever to install on a single machine at a time. So BiocManager is more of a package manager like the CRAN project, just as its package name suggests.\r\nPackages\r\nBioconductor follows a package release schedule different from CRAN, so to install Bioinformatics, we don’t use install.packages(), but instead, for example, to install edgeR, a package extensively used in processing RNA-seq data:\r\n\r\n\r\nif (!requireNamespace(\"edgeR\", quietly = TRUE))\r\n    BiocManager::install(\"edgeR\", ask = FALSE)\r\n\r\n\r\n\r\nR Startup Behaviour\r\nRprofile.site file allows users to define the behaviours at starup and the end of an R session. R will source Rprofile.site at startup. On Windows, it is located in X:{path to your R installation}.0. It should be there. If not, just create an empty text file and rename it. In case you confuse it with .Rprofile, they are equivalent; the latter is the way they name it on UNIX/Linux.\r\nTab Width\r\nRStudio by deafult uses a tab width of 2 spaces, which is consistent with the Google’s R Style Guide and the Tidyverse Style Guide. If you would like to follow the Bioconductor Style Guide, which uses 4 spaces, then add this to your Rprofile.site at the top:\r\n\r\n\r\noptions(tab.width = 4)\r\n\r\n\r\n\r\nAnd welcome to the 4-tab camp:)\r\n.First\r\n.First is the function in Rprofile.site that actually allows you to define the startup behaviour of an R session:\r\n\r\n.First <- function(){\r\n    the first thing you want at startup\r\n    the second thing you want at startup\r\n}\r\n\r\nWorking Directory\r\nR resets to a default “working directory” (most likely where you installed R) every time you open it, if your RStudio is not loaded with a R project .Rproj. It could get annoying that you have to set it to your own the working directory mannualy (if you have created one) with\r\n\r\n\r\n.First <- function(){\r\n    setwd(\"{path to your working directory}\")\r\n}\r\n\r\n\r\n\r\nYou can also load your helper functions from your utility scripts at startup:\r\n\r\n\r\n.First <- function(){\r\n    setwd(\"{path to your working directory}\")\r\n    source(\"{path to your utility scripts}\")\r\n}\r\n\r\n\r\n\r\n.Last\r\nSimilar to .First, it defines the end behaviour of an R session.\r\nSaving R Objects\r\nTo save a single R object (variables, functions, dataframe, etc.) as a file everytime closing an R session:\r\n\r\n\r\n.Last <- function(){\r\n    save(object_to_save, file = \".\\\\data\\\\name_of_object.RData\")\r\n}\r\n\r\n\r\n\r\nwhere data is a directory to store data in the working directory, if you have created one.\r\nAnd to load the object:\r\n\r\n\r\nload(\".\\\\data\\\\name_of_object.RData\")\r\n\r\n\r\n\r\nwhich could also be added to your .First if you need to use the object every time.\r\nWriting at the end\r\nI know Docker is a popular option out there for bioinformatics pipelines. It creates a consistent environment specific to the pipeline regardless of the operating system it is running on, and saves this hustle to configure R. The out-of-box feature is nice, but the downside is, Docker containers running in the background eats up computational resources (e.g. memory). In addition, if R runs in a Docker container, when communicating with some bioinformatics tools running on the host via their R API, some re-mapping of files or ports will be required.\r\n\r\n\r\n\r\nGentleman, Robert C, Vincent J Carey, Douglas M Bates, Ben Bolstad, Marcel Dettling, Sandrine Dudoit, Byron Ellis, et al. 2004. “Bioconductor: Open Software Development for Computational Biology and Bioinformatics.” Genome Biology 5 (10): 1–16.\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-06-22T14:32:24-04:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-05-04-setting-up-my-distill-blog/",
    "title": "Setting up my distill blog",
    "description": "Starting my learning journal of bioinformatics.",
    "author": [
      {
        "name": "Feifei Li",
        "url": {}
      }
    ],
    "date": "2021-05-04",
    "categories": [
      "misc."
    ],
    "contents": "\r\nMaking it the first post of my first blog.\r\nThe minimalist distill theme was taken from The Mockup Blog(Mock 2020) and modified according to my need, and the idea of scripting a darkmode for my distill site is provided generously by Jannik M. Buhr (Buhr 2021).\r\nMy first post is to give credits to people who share their ideas that have helped me in building this distill blog. As a beginner who am new to distill and have very limited experience of front end web programming, I benefited a great deal from these people’s works.\r\nTook me two days to get the site successfully deployed. Looking forward to putting some actual posts.\r\n\r\n\r\n\r\nBuhr, Jannik. 2021. “Jmbuhr.de: Making a Darkmode for Your Distill Site.” https://jmbuhr.de/posts/2021-03-14-making-a-darkmode-for-your-distill-site/.\r\n\r\n\r\nMock, Thomas. 2020. “The Mockup Blog: Building a Blog with Distill.” https://themockup.blog/posts/2020-08-01-building-a-blog-with-distill/.\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-05-04-setting-up-my-distill-blog/distill.png",
    "last_modified": "2021-05-04T22:21:24-04:00",
    "input_file": {},
    "preview_width": 2521,
    "preview_height": 2911
  }
]
