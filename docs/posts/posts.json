[
  {
    "path": "posts/2021-06-03-setting-up-r-for-bioinformatics-workflows/",
    "title": "Setting Up R for Bioinformatics Workflows",
    "description": "A Windows user oriented guide to the initial set-up for R.",
    "author": [
      {
        "name": "Feifei Li",
        "url": {}
      }
    ],
    "date": "2021-06-03",
    "categories": [
      "R",
      "bioconductor"
    ],
    "contents": "\r\n\r\nContents\r\nR SetupR Version\r\nR Package Directory\r\n\r\nBioconductorBiocManager\r\nPackages\r\n\r\nR Startup BehaviourTab Width\r\n.First\r\n.Last\r\n\r\nWriting at the end\r\n\r\nI decided to write this because some of the steps in setting up R for the new version of Bioconductor could get painful on Windows, and they never teach you this in school. On UNIX/Linux getting things set up could simply take one or two commands.\r\nR Setup\r\nTo readers who would like to follow the guide to set up R step-by-step, I recommend you set up the package directory first (see R Package Directory) if you have never done so.\r\nR Version\r\nWe are going to use Bioconductor extensively in this workflow. Each version of Bioconductor has different requirements for R version (see Bioconductor). Here I decide to use the latest version of Bioconductor (till the date this post is created), which requires R version 4.1.0 or higher.\r\nTo check if you have the right version of R installed:\r\n\r\n\r\n## Get the current version of R on your computer\r\nRver <- unlist(\r\n    regmatches(R.version.string,\r\n               regexec(\"(\\\\d+).(\\\\d+).(\\\\d+)\", R.version.string)\r\n    )\r\n)[1]\r\n## Update R if your R version is below the requirement\r\nif (Rver <= \"4.1.0\") {\r\n    if (!requireNamespace(\"installr\", quietly = TRUE)) {\r\n        if(!requireNamespace(\"devtools\", quietly = TRUE)) {\r\n            ## install installr from CRAN if no devtools\r\n            install.packages(\"installr\")\r\n        } else {\r\n            ## use devtools to install the latest installr version from GitHub\r\n            devtools::install_github('talgalili/installr')\r\n        }\r\n    }\r\n    installr::updateR()\r\n}\r\n\r\n\r\n\r\nrequireNamespace(“installr”) checks whether the package installr was already installed in R before. It returns a boolean value indicating whether the package was installed, along with a message prompted in R console if you didn’t set quitely = TRUE. You might have seen many people uses require(), which also returns a boolean value. The difference is, require also automatically loads the package if installed, or downloads if not. This means using requireNamespace(“installr”) is always a better option for checking package installation. You should always avoid load().\r\nI didn’t load the package with library(package.name) to use the function in the package, which is commonly what people do. Instead, I call the function by package.name::function.name(), and I encourage the readers to do this because it explicitly tells those people who are reading your code from which packages those functions come from. It might also help you understand better when you come back to look at your code. I prefer to keep things explicitly because it avoids confusions. However, there indeed exists exceptions where a package is required to be loaded using library(), which we will see later when we try to map HGNC symbols from Entrez ID’s.\r\nEnough of lecturing, we come back to the R setup itself. Once the code above is run, you will be prompted to install the latest version of R if the current version of R on your computer does not meet the requirement. Once the installation is complete, restart RStudio. Don’t just use the Session > Restart R because it won’t switch to the latest installed R version in RStudio. In the new R session, check your package library directory with .libpaths() as the newly updated R will change it to the R version specific directory. If the User installation was selected during the installation, the directory could be C:$env:USERNAME-library. If the default system installation was selected, it could be C:Files-4.1.0. Sometimes it ends up in X:{your R directory}-4.1.0.\r\nYou might want to change it if these are not what you want.\r\nR Package Directory\r\nFor me, I have a dedicated directory for R packages. This way, I won’t need to suffer from re-installing or migrating R packages from the previous version of R after an update. To change the default R package directory, enter the following in PowerShell:\r\n\r\nAdd-Content C:\\Users\\$env:USERNAME\\Documents\\.Renviron R_LIBS=\"{path to your package directory}\"\r\nAdd-Content C:\\Users\\$env:USERNAME\\Documents\\.Renviron R_LIBS_USER=\"{path to your package directory}\\\\user\"\r\nAdd-Content C:\\Users\\$env:USERNAME\\Documents\\.Renviron R_LIBS_SITE=\"{path to your package directory}\\\\site\"\r\n\r\nDon’t forget double slashes in the directory path.\r\nIf this is your first time setting up a default package library, after the update you will have to re-install knitr and rmarkdown.\r\nBioconductor\r\nA must-have for bioinformatics workflows.\r\nBiocManager\r\nHere we will install the latest release of Bioconductor 3.13:\r\n\r\n\r\n\r\nIt doesn’t get you the whole Bioconductor installed. This is because Bioconductor itself is not really “a piece of software”, but a collection of over 1000 R packages,(Gentleman et al. 2004) which takes forever to install on a single machine at a time. So BiocManager is more of a package manager like the CRAN project, just as its package name suggests.\r\nPackages\r\nBioconductor follows a package release schedule different from CRAN, so to install Bioinformatics, we don’t use install.packages(), but instead, for example, to install edgeR, a package extensively used in processing RNA-seq data:\r\n\r\n\r\n\r\nR Startup Behaviour\r\nRprofile.site file allows users to define the behaviours at starup and the end of an R session. R will source Rprofile.site at startup. On Windows, it is located in X:{path to your R installation}-4.1.0. It should be there. If not, just create an empty text file and rename it. In case you confuse it with .Rprofile, they are equivalent; the latter is the way they name it on UNIX/Linux.\r\nTab Width\r\nRStudio by deafult uses a tab width of 2 spaces, which is consistent with the Google’s R Style Guide and the Tidyverse Style Guide. If you would like to follow the Bioconductor Style Guide, which uses 4 spaces, then add this to your Rprofile.site at the top:\r\n\r\n\r\noptions(tab.width = 4)\r\n\r\n\r\n\r\nAnd welcome to the 4-tab camp:)\r\n.First\r\n.First is the function in Rprofile.site that actually allows you to define the startup behaviour of an R session:\r\n\r\n.First <- function(){\r\n    the first thing you want at startup\r\n    the second thing you want at startup\r\n}\r\n\r\nWorking Directory\r\nR resets to a default “working directory” (most likely where you installed R) every time you open it, if your RStudio is not loaded with a R project .Rproj. It could get annoying that you have to set it to your own the working directory mannualy (if you have created one) with\r\n\r\n\r\n.First <- function(){\r\n    setwd(\"{path to your working directory}\")\r\n}\r\n\r\n\r\n\r\nYou can also load your helper functions from your utility scripts at startup:\r\n\r\n\r\n.First <- function(){\r\n    setwd(\"{path to your working directory}\")\r\n    source(\"{path to your utility scripts}\")\r\n}\r\n\r\n\r\n\r\n.Last\r\nSimilar to .First, it defines the end behaviour of an R session.\r\nSaving R Objects\r\nTo save a single R object (variables, functions, dataframe, etc.) as a file everytime closing an R session:\r\n\r\n\r\n.Last <- function(){\r\n    save(object_to_save, file = \".\\\\data\\\\name_of_object.RData\")\r\n}\r\n\r\n\r\n\r\nwhere data is a directory to store data in the working directory, if you have created one.\r\nAnd to load the object:\r\n\r\n\r\nload(\".\\\\data\\\\name_of_object.RData\")\r\n\r\n\r\n\r\nwhich could also be added to your .First if you need to use the object every time.\r\nWriting at the end\r\nI know Docker is a popular option out there for bioinformatics pipelines. It creates a consistent environment specific to the pipeline regardless of the operating system it is running on, and saves this hustle to configure R. The out-of-box feature is nice, but the downside is, Docker containers running in the background eats up computational resources (e.g. memory). In addition, if R runs in a Docker container, when communicating with some bioinformatics tools running on the host via their R API, some re-mapping of files or ports will be required.\r\n\r\n\r\n\r\nGentleman, Robert C, Vincent J Carey, Douglas M Bates, Ben Bolstad, Marcel Dettling, Sandrine Dudoit, Byron Ellis, et al. 2004. “Bioconductor: Open Software Development for Computational Biology and Bioinformatics.” Genome Biology 5 (10): 1–16.\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-06-03T01:49:28-04:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-05-04-setting-up-my-distill-blog/",
    "title": "Setting up my distill blog",
    "description": "Starting my learning journal of bioinformatics.",
    "author": [
      {
        "name": "Feifei Li",
        "url": {}
      }
    ],
    "date": "2021-05-04",
    "categories": [
      "misc."
    ],
    "contents": "\r\nMaking it the first post of my first blog.\r\nThe minimalist distill theme was taken from The Mockup Blog(Mock 2020) and modified according to my need, and the idea of scripting a darkmode for my distill site is provided generously by Jannik M. Buhr (Buhr 2021).\r\nMy first post is to give credits to people who share their ideas that have helped me in building this distill blog. As a beginner who am new to distill and have very limited experience of front end web programming, I benefited a great deal from these people’s works.\r\nTook me two days to get the site successfully deployed. Looking forward to putting some actual posts.\r\n\r\n\r\n\r\nBuhr, Jannik. 2021. “Jmbuhr.de: Making a Darkmode for Your Distill Site.” https://jmbuhr.de/posts/2021-03-14-making-a-darkmode-for-your-distill-site/.\r\n\r\n\r\nMock, Thomas. 2020. “The Mockup Blog: Building a Blog with Distill.” https://themockup.blog/posts/2020-08-01-building-a-blog-with-distill/.\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-05-04-setting-up-my-distill-blog/distill.png",
    "last_modified": "2021-05-04T22:21:24-04:00",
    "input_file": {},
    "preview_width": 2521,
    "preview_height": 2911
  }
]
